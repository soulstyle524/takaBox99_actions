name: Android CI - Ultimate

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  GRADLE_VERSION: 7.6.1
  KOTLIN_VERSION: 1.7.20
  JAVA_VERSION: 11

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # ------------------- 环境准备阶段 -------------------
      - name: Checkout with Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive  # 确保子模块依赖完整
          fetch-depth: 0

      - name: Validate Project Structure
        run: |
          [ -f project-to-build ] || { echo "::error::project-to-build 文件缺失"; exit 1; }
          [ -d project ] || echo "::notice::未检测到预克隆项目"

      # ------------------- 环境配置阶段 -------------------
      - name: Setup Java Ecosystem
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: 'gradle'
          check-latest: true

      - name: Configure Gradle Wrapper
        run: |
          ./gradlew wrapper --gradle-version $GRADLE_VERSION --distribution-type bin
          chmod +x gradlew
          ./gradlew --version

      # ------------------- 项目克隆阶段 -------------------
      - name: Clone Target Project
        id: clone
        run: |
          PROJECT_URL=$(tr -d '\n\r' < project-to-build)
          CLONE_DIR="project-$(date +%s)"
          
          git clone \
            --depth 1 \
            --branch main \
            --single-branch \
            "$PROJECT_URL" "$CLONE_DIR" || exit 1
          
          echo "CLONE_DIR=$CLONE_DIR" >> $GITHUB_ENV
          echo "project_path=$CLONE_DIR" >> $GITHUB_OUTPUT

      # ------------------- 构建加固阶段 -------------------
      - name: Apply Critical Fixes
        working-directory: ${{ env.CLONE_DIR }}
        run: |
          # 修复 Java 模块访问限制
          sed -i '/org.gradle.jvmargs/d' gradle.properties
          echo "org.gradle.jvmargs=--add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/sun.nio.ch=ALL-UNNAMED" >> gradle.properties

          # 强制 Kotlin 版本一致性
          sed -i "s/kotlin_version=.*/kotlin_version=$KOTLIN_VERSION/" gradle.properties
          [ -f build.gradle.kts ] && sed -i "s/id(\"org.jetbrains.kotlin.android\") version \".*\"/id(\"org.jetbrains.kotlin.android\") version \"$KOTLIN_VERSION\"/" build.gradle.kts

      # ------------------- 依赖解析阶段 -------------------
      - name: Resolve Dependencies
        working-directory: ${{ env.CLONE_DIR }}
        run: |
          ./gradlew --no-daemon --stacktrace \
            -Pandroid.experimental.enableNewResourceProcessing=true \
            dependencies || {
              echo "::error::依赖解析失败，查看以下可能的问题："
              echo "1. 检查仓库镜像配置"
              echo "2. 验证代理设置"
              exit 1
            }

      # ------------------- 构建执行阶段 -------------------
      - name: Safe Build
        working-directory: ${{ env.CLONE_DIR }}
        run: |
          # 分阶段构建便于问题定位
          ./gradlew --no-daemon --stacktrace \
            clean \
            :app:preBuild \
            :app:generateDebugSources \
            :app:kaptGenerateStubsDebugKotlin \
            :app:kaptDebugKotlin \
            :app:compileDebugKotlin \
            :app:compileDebugJavaWithJavac || exit 1

          # 完整构建
          ./gradlew --no-daemon --stacktrace \
            -Porg.gradle.parallel=false \
            -Pkapt.use.worker.api=false \
            assembleDebug

      # ------------------- 产物处理阶段 -------------------
      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ github.run_id }}
          path: |
            ${{ env.CLONE_DIR }}/**/build/outputs/**/*.apk
            ${{ env.CLONE_DIR }}/build/reports/**/*.html
          retention-days: 7

      - name: Build Summary
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let report = '## 构建质量报告\n\n';
            
            try {
              const depReport = fs.readFileSync('${{ env.CLONE_DIR }}/build/reports/dependencies.txt', 'utf8');
              report += `### 依赖分析\n\`\`\`\n${depReport}\n\`\`\`\n`;
            } catch (e) {
              report += '⚠️ 依赖分析报告不可用\n';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
